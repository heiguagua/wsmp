package com.sefon.ws.service.impl;

import java.net.MalformedURLException;
import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;
import javax.xml.ws.Service;

/**
 * This class was generated by Apache CXF 3.1.11
 * 2017-08-19T18:20:40.792+08:00
 * Generated source version: 3.1.11
 * 
 */
@WebServiceClient(name = "QueryToolsService", 
                  wsdlLocation = "http://192.168.21.68:8080/ws/services/QueryToolsService?wsdl",
                  targetNamespace = "http://impl.service.ws.sefon.com") 
public class QueryToolsService extends Service {

    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("http://impl.service.ws.sefon.com", "QueryToolsService");
    public final static QName QueryToolsServiceHttpSoap11Endpoint = new QName("http://impl.service.ws.sefon.com", "QueryToolsServiceHttpSoap11Endpoint");
    public final static QName QueryToolsServiceHttpSoap12Endpoint = new QName("http://impl.service.ws.sefon.com", "QueryToolsServiceHttpSoap12Endpoint");
    public final static QName QueryToolsServiceHttpEndpoint = new QName("http://impl.service.ws.sefon.com", "QueryToolsServiceHttpEndpoint");
    static {
        URL url = null;
        try {
            url = new URL("http://192.168.21.68:8080/ws/services/QueryToolsService?wsdl");
        } catch (MalformedURLException e) {
            java.util.logging.Logger.getLogger(QueryToolsService.class.getName())
                .log(java.util.logging.Level.INFO, 
                     "Can not initialize the default wsdl from {0}", "http://192.168.21.68:8080/ws/services/QueryToolsService?wsdl");
        }
        WSDL_LOCATION = url;
    }

    public QueryToolsService(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public QueryToolsService(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public QueryToolsService() {
        super(WSDL_LOCATION, SERVICE);
    }
    




    /**
     *
     * @return
     *     returns QueryToolsServicePortType
     */
    @WebEndpoint(name = "QueryToolsServiceHttpSoap11Endpoint")
    public QueryToolsServicePortType getQueryToolsServiceHttpSoap11Endpoint() {
        return super.getPort(QueryToolsServiceHttpSoap11Endpoint, QueryToolsServicePortType.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns QueryToolsServicePortType
     */
    @WebEndpoint(name = "QueryToolsServiceHttpSoap11Endpoint")
    public QueryToolsServicePortType getQueryToolsServiceHttpSoap11Endpoint(WebServiceFeature... features) {
        return super.getPort(QueryToolsServiceHttpSoap11Endpoint, QueryToolsServicePortType.class, features);
    }


    /**
     *
     * @return
     *     returns QueryToolsServicePortType
     */
    @WebEndpoint(name = "QueryToolsServiceHttpSoap12Endpoint")
    public QueryToolsServicePortType getQueryToolsServiceHttpSoap12Endpoint() {
        return super.getPort(QueryToolsServiceHttpSoap12Endpoint, QueryToolsServicePortType.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns QueryToolsServicePortType
     */
    @WebEndpoint(name = "QueryToolsServiceHttpSoap12Endpoint")
    public QueryToolsServicePortType getQueryToolsServiceHttpSoap12Endpoint(WebServiceFeature... features) {
        return super.getPort(QueryToolsServiceHttpSoap12Endpoint, QueryToolsServicePortType.class, features);
    }


    /**
     *
     * @return
     *     returns QueryToolsServicePortType
     */
    @WebEndpoint(name = "QueryToolsServiceHttpEndpoint")
    public QueryToolsServicePortType getQueryToolsServiceHttpEndpoint() {
        return super.getPort(QueryToolsServiceHttpEndpoint, QueryToolsServicePortType.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns QueryToolsServicePortType
     */
    @WebEndpoint(name = "QueryToolsServiceHttpEndpoint")
    public QueryToolsServicePortType getQueryToolsServiceHttpEndpoint(WebServiceFeature... features) {
        return super.getPort(QueryToolsServiceHttpEndpoint, QueryToolsServicePortType.class, features);
    }

}
